@page "/campaigns"
@using BlazorSimuladorJGF.Models
@using BlazorSimuladorJGF.Services
@inject CampaignService CampaignService
@inject IJSRuntime JS

<h3>Campaigns</h3>

<button class="btn btn-primary" @onclick="ShowCreateForm">Create New Campaign</button>

@if (campaigns != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var campaign in campaigns)
            {
                <tr>
                    <td>@campaign.Name</td>
                    <td>@campaign.StartDate.ToShortDateString()</td>
                    <td>@campaign.EndDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ShowEditForm(campaign)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCampaign(campaign.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>Loading...</em></p>
}

@if (showForm)
{
    <EditForm Model="@currentCampaign" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="currentCampaign.Name" />
        </div>

        <div>
            <label for="startDate">Start Date:</label>
            <InputDate id="startDate" @bind-Value="currentCampaign.StartDate" />
        </div>

        <div>
            <label for="endDate">End Date:</label>
            <InputDate id="endDate" @bind-Value="currentCampaign.EndDate" />
        </div>

        <button type="submit" class="btn btn-success">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelForm">Cancel</button>
    </EditForm>
}

@code {
    private List<Campaign> campaigns;
    private bool showForm = false;
    private Campaign currentCampaign = new Campaign();
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        campaigns = await CampaignService.GetCampaignsAsync();
    }

    private void ShowCreateForm()
    {
        currentCampaign = new Campaign();
        showForm = true;
        isEditing = false;
    }

    private void ShowEditForm(Campaign campaign)
    {
        currentCampaign = new Campaign
        {
            Id = campaign.Id,
            Name = campaign.Name,
            StartDate = campaign.StartDate,
            EndDate = campaign.EndDate
        };
        showForm = true;
        isEditing = true;
    }

    private void CancelForm()
    {
        showForm = false;
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
            await CampaignService.UpdateCampaignAsync(currentCampaign);
        }
        else
        {
            await CampaignService.CreateCampaignAsync(currentCampaign);
        }

        campaigns = await CampaignService.GetCampaignsAsync();
        showForm = false;
    }

    private async Task DeleteCampaign(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this campaign?");
        if (confirmed)
        {
            await CampaignService.DeleteCampaignAsync(id);
            campaigns = await CampaignService.GetCampaignsAsync();
        }
    }
}