@page "/users"
@using BlazorSimuladorJGF.Models
@using BlazorSimuladorJGF.Services
@inject IUserService UserService
@inject IJSRuntime JS

<h3>Users</h3>

<button class="btn btn-primary" @onclick="ShowCreateForm">Create New User</button>

@if (users != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Name</th>
                <th>Is Phished</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.Name</td>
                    <td>@user.IsPhished</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ShowEditForm(user)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>Loading...</em></p>
}

@if (showForm)
{
    <EditForm Model="@currentUser" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="currentUser.Email" />
        </div>

        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="currentUser.Name" />
        </div>

        <div class="form-group">
            <label for="isPhished">Is Phished:</label>
            <InputCheckbox id="isPhished" class="form-check-input" @bind-Value="currentUser.IsPhished" />
        </div>

        <button type="submit" class="btn btn-success">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelForm">Cancel</button>
    </EditForm>
}

@code {
    private List<User> users;
    private bool showForm = false;
    private User currentUser = new User();
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsersAsync();
    }

    private void ShowCreateForm()
    {
        currentUser = new User();
        showForm = true;
        isEditing = false;
    }

    private void ShowEditForm(User user)
    {
        currentUser = new User
            {
                Id = user.Id,
                Email = user.Email,
                Name = user.Name,
                IsPhished = user.IsPhished
            };
        showForm = true;
        isEditing = true;
    }

    private void CancelForm()
    {
        showForm = false;
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
            await UserService.UpdateUserAsync(currentUser);
        }
        else
        {
            await UserService.AddUserAsync(currentUser);
        }

        users = await UserService.GetUsersAsync();
        showForm = false;
    }

    private async Task DeleteUser(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (confirmed)
        {
            await UserService.DeleteUserAsync(id);
            users = await UserService.GetUsersAsync();
        }
    }
}